{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,YAAY,EAAE,MAAM,aAAa,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,GAAgB;IACzC,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,mBAAmB,EAAE,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,uEAAuE;QACvE,MAAM,cAAc,GAAG,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAEvG,uDAAuD;QACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE;YAC/B,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;YAC1C,KAAK,EAAE,cAAc,IAAI,MAAM;YAC/B,aAAa,EAAE,CAAA,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,MAAM,KAAI,CAAC;SAChD,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE,mBAAmB,CAAC,CAAC;QAC3E,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACxC,OAAO,YAAY,CAAC,IAAI,CAAC;YACvB,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,wBAAwB;YAChD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;SAC1E,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC","sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { llamaChat } from '@/lib/llama-chat';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { message, topic, conversationHistory } = await req.json();\r\n    \r\n    if (!message) {\r\n      return NextResponse.json({ error: 'Message is required.' }, { status: 400 });\r\n    }\r\n\r\n    // Validate topic - ensure it's either a valid string or null/undefined\r\n    const validatedTopic = topic && typeof topic === 'string' && topic.trim() !== '' ? topic.trim() : null;\r\n\r\n    // Log the request for debugging (remove in production)\r\n    console.log('Chat API Request:', {\r\n      message: message.substring(0, 100) + '...',\r\n      topic: validatedTopic || 'null',\r\n      historyLength: conversationHistory?.length || 0\r\n    });\r\n\r\n    const text = await llamaChat(message, validatedTopic, conversationHistory);\r\n    return NextResponse.json({ text });\r\n  } catch (error: any) {\r\n    console.error('Chat API Error:', error);\r\n    return NextResponse.json({ \r\n      error: error.message || 'Internal server error.',\r\n      details: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n    }, { status: 500 });\r\n  }\r\n} "]}
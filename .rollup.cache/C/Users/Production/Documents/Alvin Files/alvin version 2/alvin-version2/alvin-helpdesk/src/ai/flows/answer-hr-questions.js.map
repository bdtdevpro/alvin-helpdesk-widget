{"version":3,"file":"answer-hr-questions.js","sourceRoot":"","sources":["answer-hr-questions.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;AAEb;;;;;;GAMG;AAEH,OAAO,EAAC,EAAE,EAAC,MAAM,aAAa,CAAC;AAC/B,OAAO,EAAC,CAAC,EAAC,MAAM,QAAQ,CAAC;AACzB,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,MAAM,2BAA2B,GAAG,CAAC,CAAC,MAAM,CAAC;IAC3C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,oCAAoC,CAAC;IACnE,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC;CAC1F,CAAC,CAAC;AAGH,MAAM,4BAA4B,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5C,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,mDAAmD,CAAC;CACjF,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,KAA4B;IACjE,OAAO,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC;AAED,8CAA8C;AAC9C,MAAM,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,+BAA+B,CAAC,EAAE,OAAO,CAAC,CAAC;AAEvH,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC;IAC7B,IAAI,EAAE,wBAAwB;IAC9B,KAAK,EAAE,EAAC,MAAM,EAAE,2BAA2B,EAAC;IAC5C,MAAM,EAAE,EAAC,MAAM,EAAE,4BAA4B,EAAC;IAC9C,MAAM,EAAE,kBAAkB;CAC3B,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,EAAE,CAAC,UAAU,CACxC;IACE,IAAI,EAAE,sBAAsB;IAC5B,WAAW,EAAE,2BAA2B;IACxC,YAAY,EAAE,4BAA4B;CAC3C,EACD,KAAK,EAAC,KAAK,EAAC,EAAE;IACZ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,OAAO,MAAO,CAAC;AACjB,CAAC,CACF,CAAC","sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A flow for answering HR-related questions using AI.\r\n *\r\n * - answerHrQuestion - A function that answers HR-related questions.\r\n * - AnswerHrQuestionInput - The input type for the answerHrQuestion function.\r\n * - AnswerHrQuestionOutput - The return type for the answerHrQuestion function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst AnswerHrQuestionInputSchema = z.object({\r\n  question: z.string().describe('The HR-related question to answer.'),\r\n  topic: z.string().nullable().describe('The specific topic context for the conversation.'),\r\n});\r\nexport type AnswerHrQuestionInput = z.infer<typeof AnswerHrQuestionInputSchema>;\r\n\r\nconst AnswerHrQuestionOutputSchema = z.object({\r\n  answer: z.string().describe('The AI-powered answer to the HR-related question.'),\r\n});\r\nexport type AnswerHrQuestionOutput = z.infer<typeof AnswerHrQuestionOutputSchema>;\r\n\r\nexport async function answerHrQuestion(input: AnswerHrQuestionInput): Promise<AnswerHrQuestionOutput> {\r\n  return answerHrQuestionFlow(input);\r\n}\r\n\r\n// Read prompt instructions from Markdown file\r\nconst promptInstructions = fs.readFileSync(path.join(process.cwd(), 'docs', 'answer-hr-questions-prompt.md'), 'utf-8');\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'answerHrQuestionPrompt',\r\n  input: {schema: AnswerHrQuestionInputSchema},\r\n  output: {schema: AnswerHrQuestionOutputSchema},\r\n  prompt: promptInstructions,\r\n});\r\n\r\nconst answerHrQuestionFlow = ai.defineFlow(\r\n  {\r\n    name: 'answerHrQuestionFlow',\r\n    inputSchema: AnswerHrQuestionInputSchema,\r\n    outputSchema: AnswerHrQuestionOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"]}
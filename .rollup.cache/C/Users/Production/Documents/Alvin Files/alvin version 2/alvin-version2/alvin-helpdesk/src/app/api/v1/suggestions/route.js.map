{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,YAAY,EAAE,MAAM,aAAa,CAAC;AACxD,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AAEpD,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,GAAgB;IACzC,IAAI,CAAC;QACH,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAE1C,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,YAAY,CAAC,CAAC;QAEpE,uCAAuC;QACvC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;YAC/C,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,oBAAoB;QACjF,CAAC,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAa,CAAC;QAEzF,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,WAAW,CAAC,CAAC;QAExD,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAE/C,qDAAqD;QACrD,MAAM,mBAAmB,GAAG;YAC1B,yCAAyC;YACzC,mCAAmC;YACnC,4BAA4B;SAC7B,CAAC;QAEF,OAAO,YAAY,CAAC,IAAI,CAAC;YACvB,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,wBAAwB;YAChD,WAAW,EAAE,mBAAmB;SACjC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC","sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getTopicSuggestions } from '@/app/actions';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { categoryName } = await req.json();\r\n    \r\n    if (!categoryName) {\r\n      return NextResponse.json({ error: 'Category name is required.' }, { status: 400 });\r\n    }\r\n\r\n    console.log('API: Getting suggestions for category:', categoryName);\r\n    \r\n    // Add timeout for the entire operation\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('API timeout')), 30000); // 30 second timeout\r\n    });\r\n    \r\n    const suggestionsPromise = getTopicSuggestions(categoryName);\r\n    \r\n    const suggestions = await Promise.race([suggestionsPromise, timeoutPromise]) as string[];\r\n    \r\n    console.log('API: Generated suggestions:', suggestions);\r\n    \r\n    return NextResponse.json({ suggestions });\r\n  } catch (error: any) {\r\n    console.error('Suggestions API Error:', error);\r\n    \r\n    // Return fallback suggestions instead of empty array\r\n    const fallbackSuggestions = [\r\n      'What are the key points of this policy?',\r\n      'How does this apply to employees?',\r\n      'What are the requirements?'\r\n    ];\r\n    \r\n    return NextResponse.json({ \r\n      error: error.message || 'Internal server error.',\r\n      suggestions: fallbackSuggestions\r\n    }, { status: 500 });\r\n  }\r\n} "]}
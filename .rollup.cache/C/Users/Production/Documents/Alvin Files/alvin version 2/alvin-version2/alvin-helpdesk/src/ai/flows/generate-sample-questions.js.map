{"version":3,"file":"generate-sample-questions.js","sourceRoot":"","sources":["generate-sample-questions.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;AAEb;;;;;;GAMG;AAEH,OAAO,EAAC,EAAE,EAAC,MAAM,aAAa,CAAC;AAC/B,OAAO,EAAC,CAAC,EAAC,MAAM,QAAQ,CAAC;AACzB,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,MAAM,kCAAkC,GAAG,CAAC,CAAC,MAAM,CAAC;IAClD,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gDAAgD,CAAC;CAC7E,CAAC,CAAC;AAGH,MAAM,mCAAmC,GAAG,CAAC,CAAC,MAAM,CAAC;IACnD,SAAS,EAAE,CAAC;SACT,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,8CAA8C,CAAC,CAAC;SAC1E,MAAM,CAAC,CAAC,CAAC;SACT,QAAQ,CAAC,4FAA4F,CAAC;CAC1G,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,KAAmC;IAEnC,OAAO,2BAA2B,CAAC,KAAK,CAAC,CAAC;AAC5C,CAAC;AAED,8CAA8C;AAC9C,IAAI,kBAA0B,CAAC;AAC/B,IAAI,CAAC;IACH,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,qCAAqC,CAAC,EAAE,OAAO,CAAC,CAAC;AACzH,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IACnD,wCAAwC;IACxC,kBAAkB,GAAG,oZAAoZ,CAAC;AAC5a,CAAC;AAED,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC;IAC7B,IAAI,EAAE,+BAA+B;IACrC,KAAK,EAAE,EAAC,MAAM,EAAE,kCAAkC,EAAC;IACnD,MAAM,EAAE,EAAC,MAAM,EAAE,mCAAmC,EAAC;IACrD,MAAM,EAAE,kBAAkB;CAC3B,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,EAAE,CAAC,UAAU,CAC/C;IACE,IAAI,EAAE,6BAA6B;IACnC,WAAW,EAAE,kCAAkC;IAC/C,YAAY,EAAE,mCAAmC;CAClD,EACD,KAAK,EAAC,KAAK,EAAC,EAAE;IACZ,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;IACzD,IAAI,CAAC;QACH,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,MAAO,CAAC;IACjB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;QAC9D,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CACF,CAAC","sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A flow for generating sample questions related to an HR topic.\r\n *\r\n * - generateSampleQuestions - A function that generates sample questions.\r\n * - GenerateSampleQuestionsInput - The input type for the generateSampleQuestions function.\r\n * - GenerateSampleQuestionsOutput - The return type for the generateSampleQuestions function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst GenerateSampleQuestionsInputSchema = z.object({\r\n  topic: z.string().describe('The HR topic to generate sample questions for.'),\r\n});\r\nexport type GenerateSampleQuestionsInput = z.infer<typeof GenerateSampleQuestionsInputSchema>;\r\n\r\nconst GenerateSampleQuestionsOutputSchema = z.object({\r\n  questions: z\r\n    .array(z.string().max(110, \"Each question must not exceed 110 characters\"))\r\n    .length(3)\r\n    .describe('An array of three sample questions related to the topic, each no more than 110 characters.'),\r\n});\r\nexport type GenerateSampleQuestionsOutput = z.infer<typeof GenerateSampleQuestionsOutputSchema>;\r\n\r\nexport async function generateSampleQuestions(\r\n  input: GenerateSampleQuestionsInput\r\n): Promise<GenerateSampleQuestionsOutput> {\r\n  return generateSampleQuestionsFlow(input);\r\n}\r\n\r\n// Read prompt instructions from Markdown file\r\nlet promptInstructions: string;\r\ntry {\r\n  promptInstructions = fs.readFileSync(path.join(process.cwd(), 'docs', 'generate-sample-questions-prompt.md'), 'utf-8');\r\n} catch (error) {\r\n  console.error('Error reading prompt file:', error);\r\n  // Fallback prompt if file reading fails\r\n  promptInstructions = `You are an AI assistant specialized in HR policies and procedures. Given the topic {{\"Hybrid Work Arrangement Policy, Amendment on No Mobile Phone & Shared Locker Policy, Amendment on Cleanliness and Upkeep, EDT Common Inquiry Questions, Proper Submission of Selfies\",}} generate three distinct and relevant sample questions that a user might ask about it. Each question must be 110 characters or less.`;\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateSampleQuestionsPrompt',\r\n  input: {schema: GenerateSampleQuestionsInputSchema},\r\n  output: {schema: GenerateSampleQuestionsOutputSchema},\r\n  prompt: promptInstructions,\r\n});\r\n\r\nconst generateSampleQuestionsFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateSampleQuestionsFlow',\r\n    inputSchema: GenerateSampleQuestionsInputSchema,\r\n    outputSchema: GenerateSampleQuestionsOutputSchema,\r\n  },\r\n  async input => {\r\n    console.log('generateSampleQuestionsFlow input:', input);\r\n    try {\r\n      const {output} = await prompt(input);\r\n      console.log('generateSampleQuestionsFlow output:', output);\r\n      return output!;\r\n    } catch (error) {\r\n      console.error('Error in generateSampleQuestionsFlow:', error);\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n"]}